version: '3.7'

services:
  botscubes_haproxy:
    container_name: botscubes_haproxy
    image: haproxy:2.8-alpine
    restart: unless-stopped
    env_file:
      - ./config/env/general.env
      - ./config/env/haproxy.env
    volumes:
      - ./config/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./data/certbot/conf/live:/etc/letsencrypt:rw
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - bot
      - bot-worker
      - user
      - web
      - certbot
    networks:
      - bot_api_nw
      - user_nw
      - frontend_nw
      - certbot_nw
      - bot_worker_nw
    
  certbot:
    container_name: certbot
    image: certbot/certbot
    restart: unless-stopped
    env_file:
      - ./config/env/general.env
      - ./config/env/certbot.env
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt:rw
      - ./log/certbot:/var/log/letsencrypt:rw
      - ./scripts/certbot:/scripts:ro
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do . /scripts/renew-cert.sh; sleep 12h & wait $${!}; done;'"
    networks:
      - certbot_nw

  bot:
    container_name: bot-service
    build:
      context: ../bot-service
      dockerfile: ../bot-service/Dockerfile
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "5"
    env_file:
      - ./config/env/bot.env
      - ./config/env/user.env
      - ./config/env/pgsql_bot.env
      - ./config/env/redis_auth.env
      - ./config/env/redis_bot.env
    volumes:
      - ../bot-service:/app:rw
      - ./cache/go/pkg/mod/cache:/go/pkg/mod/cache:rw
    tty: false
    command: go run ./cmd/bot/main.go
    depends_on:
      - pgsql_bot
      - redis_bot
      - redis_auth
      - nats
    networks:
      - bot_api_nw
      - redis_auth_nw
      - bot_worker_nw
  
  bot-worker:
    container_name: bot-worker
    build:
      context: ../bot-worker
      dockerfile: ../bot-worker/Dockerfile
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "5"
    env_file:
      - ./config/env/bot_worker.env
      - ./config/env/redis_bot.env
      - ./config/env/pgsql_bot.env
    volumes:
      - ../bot-worker:/app:rw
      - ./cache/go/pkg/mod/cache:/go/pkg/mod/cache:rw
    tty: false
    command: go run ./cmd/main.go
    depends_on:
      - pgsql_bot
      - redis_bot
      - nats
    networks:
      - bot_worker_nw
  
  pgsql_bot:
    container_name: pgsql_bot
    image: postgres:15.1-alpine
    restart: unless-stopped
    env_file:
      - ./config/env/pgsql_bot.env
    volumes: 
      - ./data/pgsql_bot/pginit:/docker-entrypoint-initdb.d:rw
      - ./data/pgsql_bot/pgdata:/var/lib/postgresql/data:rw
    ports:
      - "5431:5432"
    networks:
      - bot_api_nw
      - bot_worker_nw

  user:
    container_name: user-service
    build: ../user-service
    restart: unless-stopped
    env_file:
      - ./config/env/pgsql_bot.env
      - ./config/env/redis_auth.env
      - ./config/env/user.env
    volumes:
      - ../user-service:/app:rw
      - ./cache/go/pkg/mod/cache:/go/pkg/mod/cache:rw
    tty: false
    command: go run ./cmd/server.go
    depends_on:
      - pgsql_user
      - redis_auth
    networks:
      - user_nw
      - redis_auth_nw

  pgsql_user:
    container_name: pgsql_user
    image: postgres:15.1-alpine
    restart: unless-stopped
    env_file:
      - ./config/env/pgsql_user.env
    volumes: 
      - ./data/pgsql_user/pginit:/docker-entrypoint-initdb.d:rw
      - ./data/pgsql_user/pgdata:/var/lib/postgresql/data:rw
    ports:
      - "5430:5432"
    networks:
      - user_nw

  redis_auth: 
    container_name: redis_auth
    image: redis:7.0.5-alpine
    restart: unless-stopped
    command: redis-server
    volumes:
      - ./data/redis_auth/redis_data:/var/lib/redis:rw
      - ./config/redis_auth/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - redis_auth_nw
  
  redis_bot:
    container_name: redis_bot
    image: redis:7.0.5-alpine
    restart: unless-stopped
    command: redis-server
    volumes:
      - ./data/redis_bot/redis_data:/var/lib/redis:rw
      - ./config/redis_bot/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - bot_api_nw
      - bot_worker_nw

  web:
    container_name: web-client
    restart: unless-stopped
    build:
      context: ../web-client
      dockerfile: ../web-client/Dockerfile
    networks:
      - frontend_nw

  nats:
    container_name: nats
    image: nats:2.9.19-alpine
    restart: unless-stopped
    networks:
      - bot_api_nw
      - bot_worker_nw



networks:
  bot_api_nw:
  user_nw:
  redis_auth_nw:
  frontend_nw:
  certbot_nw:
  bot_worker_nw:
